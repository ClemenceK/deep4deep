{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:47.163528Z",
     "start_time": "2020-12-19T14:30:47.130612Z"
    }
   },
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:47.932300Z",
     "start_time": "2020-12-19T14:30:47.177047Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Preparation and imports"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Package loading"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "(To do once per environment)\n",
    "\n",
    "Clone the package from https://github.com/ClemenceK/bpifrance_deeptech_analysis\n",
    "(You probably have already done it if you have this notebook!)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-17T16:07:35.817566Z",
     "start_time": "2020-12-17T16:07:30.737021Z"
    },
    "collapsed": true,
    "hidden": true
   },
   "source": [
    "In a terminal, move to this project's folder (one step above this notebook, where the setup.py is) in your terminal \n",
    "and install from there: \n",
    "\n",
    "`pip install .`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Clone in the same place as the first package the package from: https://github.com/ClemenceK/deep4deep"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-16T10:35:49.924200Z",
     "start_time": "2020-12-16T10:35:47.187261Z"
    },
    "collapsed": true,
    "hidden": true
   },
   "source": [
    "In the terminal, stay in the same folder as before and install the deep4deep package:\n",
    "`pip install ../../deep4deep/`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:47.988485Z",
     "start_time": "2020-12-19T14:30:47.952895Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "It works if below is printed something like: test 0.0, or another figure\n",
      "test 0.0\n"
     ]
    }
   ],
   "source": [
    "#this can be used to test if the import worked\n",
    "from deep4deep.utils import simple_time_tracker\n",
    "\n",
    "@simple_time_tracker\n",
    "def test():\n",
    "    print(\"It works if below is printed something like: test 0.0, or another figure\")\n",
    "    \n",
    "test()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Local files preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "In the bpideep folder, create a .env file, and in this file write:\n",
    "\n",
    "DEALROOMAPIKEY= 'your_key' (replace by your key)\n",
    "\n",
    "(this is to avoid loading your key on github: .env is mentionned in .gitignore to not be uploaded)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Main model: Building the base data from dealroom"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Get data from Dealroom with the functions written by the former Wagon team   \n",
    "\n",
    "- **By name** : use the function `company_search` on each individual company:\n",
    "\n",
    "```\n",
    "from bpideep.getdata import company_search\n",
    "company_search(\"verkor\")\n",
    "```\n",
    "\n",
    "⚠️⚠️⚠️ \n",
    "**Important note: the search for new companies would need to be performed by batch if you have a limited number of Dealroom API calls (or if you are billed according to the number of calls)**\n",
    "\n",
    "- If want to use the **Dealroom ID**, you will need to adapt the function `getdata.getfulldata()` (former wagon team function). It works by batch, you can also use it as an example if you want to work by batch with names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:48.197135Z",
     "start_time": "2020-12-19T14:30:47.991735Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "from bpideep.getdata import company_search"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Code to get Dealroom data for our 9 companies:**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-17T18:48:10.864399Z",
     "start_time": "2020-12-17T18:48:09.286284Z"
    },
    "collapsed": true,
    "hidden": true
   },
   "source": [
    "new = [\"verkor\", \"angell\", \"carbios\",\"mastergrid\",\"pasqal\",\"gourmey\", \"Epigene Labs\",\"SpaceSense\",\"Kraaft\"]\n",
    "df = pd.DataFrame()\n",
    "\n",
    "for company in new :\n",
    "    \n",
    "    tmp = company_search(company)\n",
    "    df = pd.concat([df, tmp], ignore_index=True)\n",
    "\n",
    "df.to_csv(\"../bpideep/rawdata/demo_data.csv\", index=False)\n",
    "df.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Note: convert the above cell to code to run it; we tried to minimize API calls. \n",
    "\n",
    "If you are just looking, copy demo_data.csv from Google Drive>to copy in raw_data to your bpideep/rawdata folder (to create if needed – we don't synchronize data on github because it can be heavy) then use the code in the cell below to load it. You can also try it on just 1 or 2 companies to limit API calls.\n",
    "Google drive: https://drive.google.com/drive/folders/1PJYZ9hHrgyLLVS8mhweoytEKgQRAeLT6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:48.288861Z",
     "start_time": "2020-12-19T14:30:48.222304Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# code to load demo_data.csv if you are just looking for a demo (after copying it from Google Drive)\n",
    "# run it anyway if you used the code in the previous cell to save data (you can change the file name in both cells)\n",
    "# as the 'load_json_field' function below is made to work on a loaded csv\n",
    "df = pd.read_csv(\"../bpideep/rawdata/demo_data.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Select the needed columns to make the data analysis easier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:48.365625Z",
     "start_time": "2020-12-19T14:30:48.294709Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>total_funding_source</th>\n",
       "      <th>employees</th>\n",
       "      <th>employees_latest</th>\n",
       "      <th>launch_year</th>\n",
       "      <th>growth_stage</th>\n",
       "      <th>linkedin_url</th>\n",
       "      <th>industries</th>\n",
       "      <th>investors</th>\n",
       "      <th>team</th>\n",
       "      <th>website_url</th>\n",
       "      <th>tagline</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1985985</td>\n",
       "      <td>Verkor</td>\n",
       "      <td>0</td>\n",
       "      <td>2-10</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>seed</td>\n",
       "      <td>https://www.linkedin.com/company/verkor/</td>\n",
       "      <td>[{'id': 100023, 'name': 'energy'}]</td>\n",
       "      <td>{'items': [{'id': 869605, 'name': 'EIT InnoEne...</td>\n",
       "      <td>{'items': [{'id': 2002501, 'name': 'Benoit L.'...</td>\n",
       "      <td>http://verkor.com/</td>\n",
       "      <td>Verkor is a French industrial company set to a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1841152</td>\n",
       "      <td>Angell</td>\n",
       "      <td>10000000</td>\n",
       "      <td>11-50</td>\n",
       "      <td>25.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>early growth</td>\n",
       "      <td>https://www.linkedin.com/company/angell</td>\n",
       "      <td>[{'id': 100111, 'name': 'transportation'}]</td>\n",
       "      <td>{'items': [{'id': 1476722, 'name': 'Groupe SEB...</td>\n",
       "      <td>{'items': [{'id': 57584, 'name': 'Marc Simonci...</td>\n",
       "      <td>https://angell.bike/</td>\n",
       "      <td>Designed and produced a smart bike for better ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id    name  total_funding_source employees  employees_latest  \\\n",
       "0  1985985  Verkor                     0      2-10               9.0   \n",
       "1  1841152  Angell              10000000     11-50              25.0   \n",
       "\n",
       "   launch_year  growth_stage                              linkedin_url  \\\n",
       "0         2020          seed  https://www.linkedin.com/company/verkor/   \n",
       "1         2018  early growth   https://www.linkedin.com/company/angell   \n",
       "\n",
       "                                   industries  \\\n",
       "0          [{'id': 100023, 'name': 'energy'}]   \n",
       "1  [{'id': 100111, 'name': 'transportation'}]   \n",
       "\n",
       "                                           investors  \\\n",
       "0  {'items': [{'id': 869605, 'name': 'EIT InnoEne...   \n",
       "1  {'items': [{'id': 1476722, 'name': 'Groupe SEB...   \n",
       "\n",
       "                                                team           website_url  \\\n",
       "0  {'items': [{'id': 2002501, 'name': 'Benoit L.'...    http://verkor.com/   \n",
       "1  {'items': [{'id': 57584, 'name': 'Marc Simonci...  https://angell.bike/   \n",
       "\n",
       "                                             tagline  \n",
       "0  Verkor is a French industrial company set to a...  \n",
       "1  Designed and produced a smart bike for better ...  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data = df[[\"id\", \"name\", \"total_funding_source\", \"employees\",\n",
    "               \"employees_latest\", \"launch_year\", \"growth_stage\", \n",
    "               \"linkedin_url\", \"industries\", \"investors\", \"team\", \"website_url\", \"tagline\"]].copy()\n",
    "new_data.head(2)\n",
    "### 'team' is kept in order to get phds for part 3.4 where we create 1 feature with all phds from dealroom and LinkedIN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Add nb_patents to the new_data. \n",
    "\n",
    "Note: In our example, as we don't have an extract from Google Patents Search, we will only create a column \"nb_patents\" with 0 in it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:48.415188Z",
     "start_time": "2020-12-19T14:30:48.380231Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "new_data[\"nb_patents\"] = np.full([new_data.shape[0], 1], 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Create a new column \"age\" to get the age of the company thanks to the column \"launch_year\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:48.457562Z",
     "start_time": "2020-12-19T14:30:48.420013Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2020"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "current_year = datetime.today().year\n",
    "current_year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:48.512282Z",
     "start_time": "2020-12-19T14:30:48.470909Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "new_data[\"age\"] = current_year - new_data.launch_year"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Create a new feature \"investors_type\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:48.559236Z",
     "start_time": "2020-12-19T14:30:48.518026Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# loading a few functions to help create investors_type column\n",
    "from bpideep.GetCleanData import load_json_field, get_health, investors_type, simple_fund_investors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:48.654802Z",
     "start_time": "2020-12-19T14:30:48.563284Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>total_funding_source</th>\n",
       "      <th>employees</th>\n",
       "      <th>employees_latest</th>\n",
       "      <th>launch_year</th>\n",
       "      <th>growth_stage</th>\n",
       "      <th>linkedin_url</th>\n",
       "      <th>industries</th>\n",
       "      <th>investors</th>\n",
       "      <th>team</th>\n",
       "      <th>website_url</th>\n",
       "      <th>tagline</th>\n",
       "      <th>nb_patents</th>\n",
       "      <th>age</th>\n",
       "      <th>investors_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1985985</td>\n",
       "      <td>Verkor</td>\n",
       "      <td>0</td>\n",
       "      <td>2-10</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>seed</td>\n",
       "      <td>https://www.linkedin.com/company/verkor/</td>\n",
       "      <td>[{'id': 100023, 'name': 'energy'}]</td>\n",
       "      <td>{'items': [{'id': 869605, 'name': 'EIT InnoEne...</td>\n",
       "      <td>{'items': [{'id': 2002501, 'name': 'Benoit L.'...</td>\n",
       "      <td>http://verkor.com/</td>\n",
       "      <td>Verkor is a French industrial company set to a...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1841152</td>\n",
       "      <td>Angell</td>\n",
       "      <td>10000000</td>\n",
       "      <td>11-50</td>\n",
       "      <td>25.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>early growth</td>\n",
       "      <td>https://www.linkedin.com/company/angell</td>\n",
       "      <td>[{'id': 100111, 'name': 'transportation'}]</td>\n",
       "      <td>{'items': [{'id': 1476722, 'name': 'Groupe SEB...</td>\n",
       "      <td>{'items': [{'id': 57584, 'name': 'Marc Simonci...</td>\n",
       "      <td>https://angell.bike/</td>\n",
       "      <td>Designed and produced a smart bike for better ...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id    name  total_funding_source employees  employees_latest  \\\n",
       "0  1985985  Verkor                     0      2-10               9.0   \n",
       "1  1841152  Angell              10000000     11-50              25.0   \n",
       "\n",
       "   launch_year  growth_stage                              linkedin_url  \\\n",
       "0         2020          seed  https://www.linkedin.com/company/verkor/   \n",
       "1         2018  early growth   https://www.linkedin.com/company/angell   \n",
       "\n",
       "                                   industries  \\\n",
       "0          [{'id': 100023, 'name': 'energy'}]   \n",
       "1  [{'id': 100111, 'name': 'transportation'}]   \n",
       "\n",
       "                                           investors  \\\n",
       "0  {'items': [{'id': 869605, 'name': 'EIT InnoEne...   \n",
       "1  {'items': [{'id': 1476722, 'name': 'Groupe SEB...   \n",
       "\n",
       "                                                team           website_url  \\\n",
       "0  {'items': [{'id': 2002501, 'name': 'Benoit L.'...    http://verkor.com/   \n",
       "1  {'items': [{'id': 57584, 'name': 'Marc Simonci...  https://angell.bike/   \n",
       "\n",
       "                                             tagline  nb_patents  age  \\\n",
       "0  Verkor is a French industrial company set to a...           0    0   \n",
       "1  Designed and produced a smart bike for better ...           0    2   \n",
       "\n",
       "   investors_type  \n",
       "0               1  \n",
       "1               0  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# from string back to json for fields that have been \"stringified\" by saving to csv\n",
    "new_data[\"investors\"] = new_data[\"investors\"].apply(load_json_field)\n",
    "\n",
    "#extracting the types of investors from the json\n",
    "new_data[\"investors_type\"] = new_data[\"investors\"].map(investors_type)\n",
    "\n",
    "#encoding as 0 or 1\n",
    "new_data.loc[:,'investors_type'] = new_data['investors_type'].map(simple_fund_investors)\n",
    "\n",
    "new_data.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Note: if you get mistakes, it might be because you ran the same cell multiple times, so the columns are not as expected anymore. Rerun from 2.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Create a new feature \"health_industry\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:48.756642Z",
     "start_time": "2020-12-19T14:30:48.685007Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>total_funding_source</th>\n",
       "      <th>employees</th>\n",
       "      <th>employees_latest</th>\n",
       "      <th>launch_year</th>\n",
       "      <th>growth_stage</th>\n",
       "      <th>linkedin_url</th>\n",
       "      <th>industries</th>\n",
       "      <th>investors</th>\n",
       "      <th>team</th>\n",
       "      <th>website_url</th>\n",
       "      <th>tagline</th>\n",
       "      <th>nb_patents</th>\n",
       "      <th>age</th>\n",
       "      <th>investors_type</th>\n",
       "      <th>health_industry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1985985</td>\n",
       "      <td>Verkor</td>\n",
       "      <td>0</td>\n",
       "      <td>2-10</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>seed</td>\n",
       "      <td>https://www.linkedin.com/company/verkor/</td>\n",
       "      <td>[{'id': 100023, 'name': 'energy'}]</td>\n",
       "      <td>{'items': [{'id': 869605, 'name': 'EIT InnoEne...</td>\n",
       "      <td>{'items': [{'id': 2002501, 'name': 'Benoit L.'...</td>\n",
       "      <td>http://verkor.com/</td>\n",
       "      <td>Verkor is a French industrial company set to a...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1841152</td>\n",
       "      <td>Angell</td>\n",
       "      <td>10000000</td>\n",
       "      <td>11-50</td>\n",
       "      <td>25.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>early growth</td>\n",
       "      <td>https://www.linkedin.com/company/angell</td>\n",
       "      <td>[{'id': 100111, 'name': 'transportation'}]</td>\n",
       "      <td>{'items': [{'id': 1476722, 'name': 'Groupe SEB...</td>\n",
       "      <td>{'items': [{'id': 57584, 'name': 'Marc Simonci...</td>\n",
       "      <td>https://angell.bike/</td>\n",
       "      <td>Designed and produced a smart bike for better ...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id    name  total_funding_source employees  employees_latest  \\\n",
       "0  1985985  Verkor                     0      2-10               9.0   \n",
       "1  1841152  Angell              10000000     11-50              25.0   \n",
       "\n",
       "   launch_year  growth_stage                              linkedin_url  \\\n",
       "0         2020          seed  https://www.linkedin.com/company/verkor/   \n",
       "1         2018  early growth   https://www.linkedin.com/company/angell   \n",
       "\n",
       "                                   industries  \\\n",
       "0          [{'id': 100023, 'name': 'energy'}]   \n",
       "1  [{'id': 100111, 'name': 'transportation'}]   \n",
       "\n",
       "                                           investors  \\\n",
       "0  {'items': [{'id': 869605, 'name': 'EIT InnoEne...   \n",
       "1  {'items': [{'id': 1476722, 'name': 'Groupe SEB...   \n",
       "\n",
       "                                                team           website_url  \\\n",
       "0  {'items': [{'id': 2002501, 'name': 'Benoit L.'...    http://verkor.com/   \n",
       "1  {'items': [{'id': 57584, 'name': 'Marc Simonci...  https://angell.bike/   \n",
       "\n",
       "                                             tagline  nb_patents  age  \\\n",
       "0  Verkor is a French industrial company set to a...           0    0   \n",
       "1  Designed and produced a smart bike for better ...           0    2   \n",
       "\n",
       "   investors_type  health_industry  \n",
       "0               1                0  \n",
       "1               0                0  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data[\"health_industry\"] = get_health(new_data[\"industries\"])\n",
    "new_data.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Main model: Scraping and adding the LinkedIn data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Generate COMPANIES scripts for webscraper and scrape LinkedIn\n",
    "For a better understanding use the Florent_demo notebook (in notebooks folder and/or documentation floder) to scrape files from Linked In (request a demo to Florent Martin if needed!)\n",
    "\n",
    "The scraped data should be included in a folder `bpi_deep/scraping_data/companies_people/`\n",
    "prior to calling the function `build employee_df`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:48.806144Z",
     "start_time": "2020-12-19T14:30:48.761171Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "script_batch_0\n",
      "{\"_id\":\"scraping\",\"startUrl\":[\"https://www.linkedin.com/company/verkor//people\", \"https://www.linkedin.com/company/angell/people\", \"https://www.linkedin.com/company/carbios/people\", \"https://www.linkedin.com/company/mastergrid//people\", \"https://www.linkedin.com/company/pasqal/people\", \"https://www.linkedin.com/company/gourmey/people\", \"https://www.linkedin.com/company/epigene-labs/people\", \"https://www.linkedin.com/company/spacesense-co/people\", \"https://www.linkedin.com/company/kraaft-co/people\"],\"selectors\":[                    {\"id\":\"container\",\"type\":\"SelectorElementScroll\",\"parentSelectors\":[\"_root\"],\"selector\":\"div.org-people-profile-card__profile-info\",\"multiple\":true,\"delay\":\"1234\"},                        {\"id\":\"name\",\"type\":\"SelectorText\",\"parentSelectors\":[\"container\"],\"selector\":\"div.org-people-profile-card__profile-title\",\"multiple\":false,\"regex\":\"\",\"delay\":0},                        {\"id\":\"title\",\"type\":\"SelectorText\",\"parentSelectors\":[\"container\"],\"selector\":\"div.lt-line-clamp--multi-line\",\"multiple\":false,\"regex\":\"\",\"delay\":0},                        {\"id\":\"profile\",\"type\":\"SelectorLink\",\"parentSelectors\":[\"container\"],\"selector\":\"a.link-without-visited-state\",\"multiple\":false,\"delay\":0}]}\n"
     ]
    }
   ],
   "source": [
    "from bpideep.scraping_scripting import make_script_company_scraping\n",
    "# here we use a batch size of 10 but you can use a larger one, until 100\n",
    "make_script_company_scraping(new_data,10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "These scripts will be needed to use web scraper:\n",
    "https://chrome.google.com/webstore/detail/web-scraper-free-web-scra/jnhgnonknehpejjnehehllkliplmbmhn\n",
    "\n",
    "**How to use webscraper to generate csv**\n",
    "+ Install the extension\n",
    "+ On Chrome: click vertical three points on top right> More tools> Developper tools\n",
    "+ Then on right click > Inspect (on any page) you should see \"Webscraper\" as one of the tools\n",
    "    + It is recommended to use \"Dock to bottom\" configuration in \"Dock side\" parameter for a better view\n",
    "    \n",
    "    \n",
    "+ Click Webscraper > **Create New Site Map > Import Site Map**\n",
    "+ Paste the description from the script obtained above in \"Sitemap JSON\"\n",
    "    + Each script starts with { and ends with }\n",
    "    + The different scripts are delimited by \"script_batch_0\", \"script_batch_1\"… you can only do one at a time\n",
    "+ Give the script name (e.g. script_batch_0) in \"Rename Sitemap\" (it will be the name of the csv file you'll obtain)\n",
    "+ Click \"Import sitemap\"\n",
    "+ Click the \"Sitemap (your chosen name)\" menu\n",
    "+ Click \"Scrape\"\n",
    "+ Click \"Start Scraping\"\n",
    "    + A browser window opens and loads the pages to scrape\n",
    "    + you can keep working on other things meanwhile\n",
    "    + You may occasionnaly be signed out from Linked In: just sign in again and reload scraping\n",
    "    + You can hit the \"refresh\" button on the initial page to see already scraped data\n",
    "    + You know it is finished when the new browser window closes\n",
    "+ Once finished, \n",
    "    + click the \"Sitemap (your chosen name)\" menu again then \"Import data as CSV\"\n",
    "    + click \"Download now\"\n",
    "    + Chose folder `bpi_deep/scraping_data/companies_people/` (create it if needed, as it is not uploaded on github)\n",
    "+ Then repeat from \" Create New Site Map > Import Site Map\" for the next script until all scripts have been covered\n",
    "    + When a script has \"startUrl\":[ ] and no pop up window opens, it's that all requested companies have been covered"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Process the scraped data to a dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Create a `result_files` directory inside the `bpi_deep/scraping_data/` folder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:49.345882Z",
     "start_time": "2020-12-19T14:30:48.813216Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "from bpideep.process_scraped_data import build_employee_df, process_employee_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:50.345062Z",
     "start_time": "2020-12-19T14:30:49.351760Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# The csv containing the scraped data should be included in a folder `bpi_deep/scraping_data/companies_people/`\n",
    "# prior to calling the function \"build employee_df\"\n",
    "df_employees= process_employee_data(build_employee_df())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:50.450966Z",
     "start_time": "2020-12-19T14:30:50.352213Z"
    },
    "hidden": true,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>employee_name</th>\n",
       "      <th>title</th>\n",
       "      <th>profile-href</th>\n",
       "      <th>linkedin_url</th>\n",
       "      <th>technical</th>\n",
       "      <th>founder</th>\n",
       "      <th>phd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Agnès Mathé</td>\n",
       "      <td>responsable communication</td>\n",
       "      <td>https://www.linkedin.com/in/agn%C3%A8s-math%C3...</td>\n",
       "      <td>https://www.linkedin.com/company/carbios</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Loic Zangara</td>\n",
       "      <td>vice-president france &amp; operations</td>\n",
       "      <td>https://www.linkedin.com/in/loic-zangara-b8190...</td>\n",
       "      <td>https://www.linkedin.com/company/mastergrid</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Gilles Stedile</td>\n",
       "      <td>superviseur chantier</td>\n",
       "      <td>https://www.linkedin.com/in/gilles-stedile-28b...</td>\n",
       "      <td>https://www.linkedin.com/company/mastergrid</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>directeur technique</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://www.linkedin.com/company/mastergrid</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Meryl Merloz</td>\n",
       "      <td>purchaser</td>\n",
       "      <td>https://www.linkedin.com/in/merylmerloz/</td>\n",
       "      <td>https://www.linkedin.com/company/mastergrid</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    employee_name                               title  \\\n",
       "0     Agnès Mathé           responsable communication   \n",
       "1    Loic Zangara  vice-president france & operations   \n",
       "2  Gilles Stedile                superviseur chantier   \n",
       "3             NaN                 directeur technique   \n",
       "4    Meryl Merloz                           purchaser   \n",
       "\n",
       "                                        profile-href  \\\n",
       "0  https://www.linkedin.com/in/agn%C3%A8s-math%C3...   \n",
       "1  https://www.linkedin.com/in/loic-zangara-b8190...   \n",
       "2  https://www.linkedin.com/in/gilles-stedile-28b...   \n",
       "3                                                NaN   \n",
       "4           https://www.linkedin.com/in/merylmerloz/   \n",
       "\n",
       "                                  linkedin_url  technical  founder  phd  \n",
       "0     https://www.linkedin.com/company/carbios          0        0    0  \n",
       "1  https://www.linkedin.com/company/mastergrid          0        0    0  \n",
       "2  https://www.linkedin.com/company/mastergrid          0        0    0  \n",
       "3  https://www.linkedin.com/company/mastergrid          1        0    0  \n",
       "4  https://www.linkedin.com/company/mastergrid          0        0    0  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Example of the content of the employee dataframe after processing\n",
    "df_employees.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Generate EMPLOYEES profile scripts for webscraper and scrape LinkedIn\n",
    "Also documented in the Florent_demo notebook (in notebooks folder and/or documentation floder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:50.540552Z",
     "start_time": "2020-12-19T14:30:50.464289Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "from bpideep.scraping_scripting import make_script_employee_scraping"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Create the folder `bpideep/scraping_data/scraping_scripts`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:50.645573Z",
     "start_time": "2020-12-19T14:30:50.550363Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "script_batch_0\n",
      "{\"_id\":\"profiles\",\"startUrl\":[\"https://www.linkedin.com/in/antoine-davydoff-35a569149/\", \"https://www.linkedin.com/in/alain-marty-40251539/\", \"https://www.linkedin.com/in/christophe-mille-506729/\", \"https://www.linkedin.com/in/nicolasmorinforest/\", \"https://www.linkedin.com/in/pauline-de-breteuil/\", \"https://www.linkedin.com/in/sylvainpaineau/\", \"https://www.linkedin.com/in/dekelpersi/\", \"https://www.linkedin.com/in/philippechain/\", \"https://www.linkedin.com/in/victor-sayous-a70190106/\", \"https://www.linkedin.com/in/matthieu-marquenet/\", \"https://www.linkedin.com/in/marc-negre-9548a58b/\", \"https://www.linkedin.com/in/fran%C3%A7ois-dechelette-357b481a/\", \"https://www.linkedin.com/in/eliott-raoult/\", \"https://www.linkedin.com/in/akpelinordor/\", \"https://www.linkedin.com/in/benoit-l-89772a2/\", \"https://www.linkedin.com/in/barriere/\", \"https://www.linkedin.com/in/christophe-jurczak/\", \"https://www.linkedin.com/in/sami-yacoubi-05902992/\", \"https://www.linkedin.com/in/martin-j-stephan/\", \"https://www.linkedin.com/in/b-jyotsna/\", \"https://www.linkedin.com/in/renan-devillieres-9349151b5/\", \"https://www.linkedin.com/in/thomas-reygagne/\", \"https://www.linkedin.com/in/fr%C3%A9d%C3%A9ric-carencotte-57270496/\", \"https://www.linkedin.com/in/antoine-fine-74602719/\", \"https://www.linkedin.com/in/renan-devillieres-4b8a3a83/\", \"https://www.linkedin.com/in/c%C3%A9dric-boidin-a402235/\", \"https://www.linkedin.com/in/georges-olivier-reymond-415b3824/\", \"https://www.linkedin.com/in/arthurdegaridel/\", \"https://www.linkedin.com/in/oldufour/\"],     \"selectors\":[    {\"id\":\"experience_bullets\",\"type\":\"SelectorElement\",\"parentSelectors\":[\"scroll_top\"],     \"selector\":\"section.pv-profile-section__card-item-v2\",\"multiple\":true,\"delay\":0},    {\"id\":\"experience_bullet\",\"type\":\"SelectorElement\",\"parentSelectors\":[\"experience_bullets\"],     \"selector\":\"div.justify-space-between\",\"multiple\":false,\"delay\":0},    {\"id\":\"title\",\"type\":\"SelectorText\",\"parentSelectors\":[\"experience_bullet\"],     \"selector\":\"h3\",\"multiple\":true,\"regex\":\"\",\"delay\":0},    {\"id\":\"company\",\"type\":\"SelectorText\",\"parentSelectors\":[\"experience_bullet\"],     \"selector\":\"p.pv-entity__secondary-title\",\"multiple\":false,\"regex\":\"\",\"delay\":0},    {\"id\":\"education_bullets\",\"type\":\"SelectorElement\",\"parentSelectors\":[\"scroll_top\"],     \"selector\":\"li.pv-education-entity\",\"multiple\":true,\"delay\":0},    {\"id\":\"institution\",\"type\":\"SelectorText\",\"parentSelectors\":[\"education_bullets\"],     \"selector\":\"h3\",\"multiple\":false,\"regex\":\"\",\"delay\":0},    {\"id\":\"degree\",\"type\":\"SelectorText\",\"parentSelectors\":[\"education_bullets\"],     \"selector\":\".pv-entity__degree-name span.pv-entity__comma-item\",\"multiple\":false,\"regex\":\"\",\"delay\":0},    {\"id\":\"field\",\"type\":\"SelectorText\",\"parentSelectors\":[\"education_bullets\"],     \"selector\":\".pv-entity__fos span.pv-entity__comma-item\",\"multiple\":false,\"regex\":\"\",\"delay\":0},    {\"id\":\"exp_description\",\"type\":\"SelectorText\",\"parentSelectors\":[\"experience_bullet\"],     \"selector\":\"p.pv-entity__description\",\"multiple\":false,\"regex\":\"\",\"delay\":0},    {\"id\":\"publications_others\",\"type\":\"SelectorElement\",\"parentSelectors\":[\"scroll_top\"],     \"selector\":\"section.pv-accomplishments-block\",\"multiple\":true,\"delay\":0},    {\"id\":\"type\",\"type\":\"SelectorText\",\"parentSelectors\":[\"publications_others\"],     \"selector\":\"h3.pv-accomplishments-block__title\",\"multiple\":false,\"regex\":\"\",\"delay\":0},    {\"id\":\"amount\",\"type\":\"SelectorText\",\"parentSelectors\":[\"publications_others\"],     \"selector\":\"span:nth-of-type(2)\",\"multiple\":false,\"regex\":\"\",\"delay\":0},    {\"id\":\"text_content\",\"type\":\"SelectorText\",\"parentSelectors\":[\"publications_others\"],     \"selector\":\"ul\",\"multiple\":false,\"regex\":\"\",\"delay\":0},    {\"id\":\"scroll_top\",\"type\":\"SelectorElementScroll\",\"parentSelectors\":[\"_root\"],     \"selector\":\"div.profile-detail\",\"multiple\":false,\"delay\":2000}]}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[[\"https://www.linkedin.com/in/antoine-davydoff-35a569149/\",\n",
       "  \"https://www.linkedin.com/in/alain-marty-40251539/\",\n",
       "  \"https://www.linkedin.com/in/christophe-mille-506729/\",\n",
       "  \"https://www.linkedin.com/in/nicolasmorinforest/\",\n",
       "  \"https://www.linkedin.com/in/pauline-de-breteuil/\",\n",
       "  \"https://www.linkedin.com/in/sylvainpaineau/\",\n",
       "  \"https://www.linkedin.com/in/dekelpersi/\",\n",
       "  \"https://www.linkedin.com/in/philippechain/\",\n",
       "  \"https://www.linkedin.com/in/victor-sayous-a70190106/\",\n",
       "  \"https://www.linkedin.com/in/matthieu-marquenet/\",\n",
       "  \"https://www.linkedin.com/in/marc-negre-9548a58b/\",\n",
       "  \"https://www.linkedin.com/in/fran%C3%A7ois-dechelette-357b481a/\",\n",
       "  \"https://www.linkedin.com/in/eliott-raoult/\",\n",
       "  \"https://www.linkedin.com/in/akpelinordor/\",\n",
       "  \"https://www.linkedin.com/in/benoit-l-89772a2/\",\n",
       "  \"https://www.linkedin.com/in/barriere/\",\n",
       "  \"https://www.linkedin.com/in/christophe-jurczak/\",\n",
       "  \"https://www.linkedin.com/in/sami-yacoubi-05902992/\",\n",
       "  \"https://www.linkedin.com/in/martin-j-stephan/\",\n",
       "  \"https://www.linkedin.com/in/b-jyotsna/\",\n",
       "  \"https://www.linkedin.com/in/renan-devillieres-9349151b5/\",\n",
       "  \"https://www.linkedin.com/in/thomas-reygagne/\",\n",
       "  \"https://www.linkedin.com/in/fr%C3%A9d%C3%A9ric-carencotte-57270496/\",\n",
       "  \"https://www.linkedin.com/in/antoine-fine-74602719/\",\n",
       "  \"https://www.linkedin.com/in/renan-devillieres-4b8a3a83/\",\n",
       "  \"https://www.linkedin.com/in/c%C3%A9dric-boidin-a402235/\",\n",
       "  \"https://www.linkedin.com/in/georges-olivier-reymond-415b3824/\",\n",
       "  \"https://www.linkedin.com/in/arthurdegaridel/\",\n",
       "  \"https://www.linkedin.com/in/oldufour/\"]]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "make_script_employee_scraping(df_employees, 100, founders = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "The scripts are saved in the folder `bpideep/scraping_data/scraping_scripts`, you can open them with Sublime Text or another text editor.\n",
    "\n",
    "Using the same process as before with Webscraper, scrape Employees using the scripts generated.\n",
    "Only difference: this time save them in folder: `bpi_deep/scraping_data/founders_files/`\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "The scraped data should be included in a folder `bpi_deep/scraping_data/founders_files/`\n",
    "prior to calling the function `open_founder_profile_files`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Process the scraped data to a dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:50.724253Z",
     "start_time": "2020-12-19T14:30:50.654195Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Prior to calling the function \"open_founder_profile_files\", the csv containing the scrapped data from founders\n",
    "# should be included in a folder 'bpi_deep/scraping_data/founders_files/'\n",
    "from bpideep.process_scraped_data import open_founder_profile_files, inline_profile\n",
    "from bpideep.process_scraped_data import build_founders_dataframe, generate_founders_features\n",
    "df_founders_raw = open_founder_profile_files()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:52.651476Z",
     "start_time": "2020-12-19T14:30:50.742803Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1596: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[key] = _infer_fill_value(value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "/Users/admin/.pyenv/versions/data/envs/NLP/lib/python3.8/site-packages/pandas/core/frame.py:4167: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n"
     ]
    }
   ],
   "source": [
    "#The function \"build_founders_dataframe\" processes the raw df and returns a df with one line per founder\n",
    "#The function \"generate_founders_features\" generates the new relevant features such as \"founder_has_phd\" etc..\n",
    "df_founders = generate_founders_features(build_founders_dataframe(df_founders_raw))\n",
    "\n",
    "# Note: it generates many warnings but none is in our own files \n",
    "# (all in pandas/core/frame.py or indexing.py) so please ignore them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:52.757884Z",
     "start_time": "2020-12-19T14:30:52.655256Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>profile-href</th>\n",
       "      <th>title</th>\n",
       "      <th>company</th>\n",
       "      <th>exp_description</th>\n",
       "      <th>title_2</th>\n",
       "      <th>company_2</th>\n",
       "      <th>exp_description_2</th>\n",
       "      <th>title_3</th>\n",
       "      <th>company_3</th>\n",
       "      <th>exp_description_3</th>\n",
       "      <th>...</th>\n",
       "      <th>type_4</th>\n",
       "      <th>amount_4</th>\n",
       "      <th>text_content_4</th>\n",
       "      <th>type_5</th>\n",
       "      <th>amount_5</th>\n",
       "      <th>text_content_5</th>\n",
       "      <th>founder_has_phd</th>\n",
       "      <th>founder_from_institute</th>\n",
       "      <th>founder_pat_pub</th>\n",
       "      <th>technical_founder</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>https://www.linkedin.com/in/sami-yacoubi-05902...</td>\n",
       "      <td>Engineering Intern</td>\n",
       "      <td>VINCI Construction</td>\n",
       "      <td>-Developement of a hybrid mobile app that allo...</td>\n",
       "      <td>Travel semester in New-Zealand</td>\n",
       "      <td>New-Zealand</td>\n",
       "      <td>Semester spent away from university in New-Zea...</td>\n",
       "      <td>Study semester in Austria</td>\n",
       "      <td>Graz University of Technology</td>\n",
       "      <td>Erasmus exchange program in Graz, Austria to i...</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>https://www.linkedin.com/in/sylvainpaineau/</td>\n",
       "      <td>Board Member</td>\n",
       "      <td>Cocoon Care</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Administrateur</td>\n",
       "      <td>Tenerrdis</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Co-Founder &amp; Chief Strategy &amp; Partnerships Off...</td>\n",
       "      <td>Verkor\\n        Permanent</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>https://www.linkedin.com/in/victor-sayous-a701...</td>\n",
       "      <td>Internship</td>\n",
       "      <td>Université de Bordeaux</td>\n",
       "      <td>GESVAB-Institut des Sciences de la Vigne et du...</td>\n",
       "      <td>Internship</td>\n",
       "      <td>CNRS - Centre national de la recherche scienti...</td>\n",
       "      <td>UMR 7245 CNRS/MNHN Département Régulation-Déve...</td>\n",
       "      <td>Co-Founder &amp; CTO</td>\n",
       "      <td>GOURMEY</td>\n",
       "      <td>On a mission to bring delicious cultivated mea...</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 50 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        profile-href               title  \\\n",
       "0  https://www.linkedin.com/in/sami-yacoubi-05902...  Engineering Intern   \n",
       "1        https://www.linkedin.com/in/sylvainpaineau/        Board Member   \n",
       "2  https://www.linkedin.com/in/victor-sayous-a701...          Internship   \n",
       "\n",
       "                  company                                    exp_description  \\\n",
       "0      VINCI Construction  -Developement of a hybrid mobile app that allo...   \n",
       "1             Cocoon Care                                                NaN   \n",
       "2  Université de Bordeaux  GESVAB-Institut des Sciences de la Vigne et du...   \n",
       "\n",
       "                          title_2  \\\n",
       "0  Travel semester in New-Zealand   \n",
       "1                  Administrateur   \n",
       "2                      Internship   \n",
       "\n",
       "                                           company_2  \\\n",
       "0                                        New-Zealand   \n",
       "1                                          Tenerrdis   \n",
       "2  CNRS - Centre national de la recherche scienti...   \n",
       "\n",
       "                                   exp_description_2  \\\n",
       "0  Semester spent away from university in New-Zea...   \n",
       "1                                                NaN   \n",
       "2  UMR 7245 CNRS/MNHN Département Régulation-Déve...   \n",
       "\n",
       "                                             title_3  \\\n",
       "0                          Study semester in Austria   \n",
       "1  Co-Founder & Chief Strategy & Partnerships Off...   \n",
       "2                                   Co-Founder & CTO   \n",
       "\n",
       "                       company_3  \\\n",
       "0  Graz University of Technology   \n",
       "1      Verkor\\n        Permanent   \n",
       "2                        GOURMEY   \n",
       "\n",
       "                                   exp_description_3  ... type_4 amount_4  \\\n",
       "0  Erasmus exchange program in Graz, Austria to i...  ...    NaN      NaN   \n",
       "1                                                NaN  ...    NaN      NaN   \n",
       "2  On a mission to bring delicious cultivated mea...  ...    NaN      NaN   \n",
       "\n",
       "  text_content_4 type_5 amount_5 text_content_5 founder_has_phd  \\\n",
       "0            NaN    NaN      NaN            NaN               0   \n",
       "1            NaN    NaN      NaN            NaN               0   \n",
       "2            NaN    NaN      NaN            NaN               1   \n",
       "\n",
       "  founder_from_institute founder_pat_pub technical_founder  \n",
       "0                      0               0                 0  \n",
       "1                      0               0                 0  \n",
       "2                      1               0                 1  \n",
       "\n",
       "[3 rows x 50 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_founders.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:52.921642Z",
     "start_time": "2020-12-19T14:30:52.768578Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>linkedin_url</th>\n",
       "      <th>technical</th>\n",
       "      <th>phd_linkedin</th>\n",
       "      <th>employee__linkedin_count</th>\n",
       "      <th>founder_from_institute</th>\n",
       "      <th>founder_has_phd</th>\n",
       "      <th>founder_pat_pub</th>\n",
       "      <th>technical_founder</th>\n",
       "      <th>no_linkedin_data</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>https://www.linkedin.com/company/carbios</td>\n",
       "      <td>0.315789</td>\n",
       "      <td>1.0</td>\n",
       "      <td>38</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>https://www.linkedin.com/company/carester</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>https://www.linkedin.com/company/epigene-labs</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>12</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>https://www.linkedin.com/company/gourmey</td>\n",
       "      <td>0.526316</td>\n",
       "      <td>5.0</td>\n",
       "      <td>19</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>https://www.linkedin.com/company/kraaft-co</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>https://www.linkedin.com/company/mastergrid</td>\n",
       "      <td>0.183908</td>\n",
       "      <td>0.0</td>\n",
       "      <td>87</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>https://www.linkedin.com/company/pasqal</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>16</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>https://www.linkedin.com/company/spacesense-ai</td>\n",
       "      <td>0.307692</td>\n",
       "      <td>1.0</td>\n",
       "      <td>13</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>https://www.linkedin.com/company/verkor</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     linkedin_url  technical  phd_linkedin  \\\n",
       "0        https://www.linkedin.com/company/carbios   0.315789           1.0   \n",
       "1       https://www.linkedin.com/company/carester   0.571429           1.0   \n",
       "2   https://www.linkedin.com/company/epigene-labs   0.250000           1.0   \n",
       "3        https://www.linkedin.com/company/gourmey   0.526316           5.0   \n",
       "4      https://www.linkedin.com/company/kraaft-co   0.142857           0.0   \n",
       "5     https://www.linkedin.com/company/mastergrid   0.183908           0.0   \n",
       "6         https://www.linkedin.com/company/pasqal   0.500000           4.0   \n",
       "7  https://www.linkedin.com/company/spacesense-ai   0.307692           1.0   \n",
       "8         https://www.linkedin.com/company/verkor   0.333333           0.0   \n",
       "\n",
       "   employee__linkedin_count  founder_from_institute  founder_has_phd  \\\n",
       "0                        38                     0.0              1.0   \n",
       "1                         7                     0.0              0.0   \n",
       "2                        12                     0.0              1.0   \n",
       "3                        19                     2.0              1.0   \n",
       "4                        14                     0.0              0.0   \n",
       "5                        87                     0.0              0.0   \n",
       "6                        16                     0.0              2.0   \n",
       "7                        13                     0.0              0.0   \n",
       "8                        12                     1.0              0.0   \n",
       "\n",
       "   founder_pat_pub  technical_founder  no_linkedin_data  \n",
       "0              0.0                1.0                 0  \n",
       "1              0.0                0.0                 0  \n",
       "2              0.0                1.0                 0  \n",
       "3              0.0                2.0                 0  \n",
       "4              0.0                0.0                 0  \n",
       "5              0.0                0.0                 0  \n",
       "6              2.0                2.0                 0  \n",
       "7              0.0                0.0                 0  \n",
       "8              1.0                1.0                 0  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Finally, we merge founders to the full employee DF, update the feature \"technical\", and aggregate into companies\n",
    "from bpideep.process_scraped_data import companies_technical_stats_with_founders_features, update_technical\n",
    "df_employees_full = update_technical(df_employees, df_founders)\n",
    "df_companies_stats_with_founders_features = companies_technical_stats_with_founders_features(df_employees_full)\n",
    "df_companies_stats_with_founders_features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "----\n",
    "Please **delete the two cells below** when running the notebook for yourself (they are just corrections because we did the scraping with urls not coming from dealroom, and it would be long to scrape again – but if you follow this notebook you won't have the same problem)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:52.985974Z",
     "start_time": "2020-12-19T14:30:52.927188Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Here we must correct for a Linkedin URL mismatched (scraping was done with the url \n",
    "# https://www.linkedin.com/company/mastergrid whereas the dealroom url has a slash at the end).\n",
    "# Note that there would not be an issue when running the process in correct order\n",
    "# by first doing the dealroom query and then building the scraping script\n",
    "old_url = 'https://www.linkedin.com/company/mastergrid'\n",
    "new_url = 'https://www.linkedin.com/company/mastergrid/'\n",
    "df_companies_stats_with_founders_features[df_companies_stats_with_founders_features['linkedin_url'] == old_url]\n",
    "df_companies_stats_with_founders_features.loc\\\n",
    "    [df_companies_stats_with_founders_features['linkedin_url'] == old_url, \"linkedin_url\"]= new_url"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:53.131795Z",
     "start_time": "2020-12-19T14:30:53.031950Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Similar issue for spacesense\n",
    "old_url = 'https://www.linkedin.com/company/spacesense-ai'\n",
    "new_url = 'https://www.linkedin.com/company/spacesense-co'\n",
    "df_companies_stats_with_founders_features[df_companies_stats_with_founders_features['linkedin_url'] == old_url]\n",
    "df_companies_stats_with_founders_features.loc\\\n",
    "    [df_companies_stats_with_founders_features['linkedin_url'] == old_url, \"linkedin_url\"]= new_url"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:53.245106Z",
     "start_time": "2020-12-19T14:30:53.135058Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>linkedin_url</th>\n",
       "      <th>technical</th>\n",
       "      <th>phd_linkedin</th>\n",
       "      <th>employee__linkedin_count</th>\n",
       "      <th>founder_from_institute</th>\n",
       "      <th>founder_has_phd</th>\n",
       "      <th>founder_pat_pub</th>\n",
       "      <th>technical_founder</th>\n",
       "      <th>no_linkedin_data</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>https://www.linkedin.com/company/carbios</td>\n",
       "      <td>0.315789</td>\n",
       "      <td>1.0</td>\n",
       "      <td>38</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>https://www.linkedin.com/company/carester</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>https://www.linkedin.com/company/epigene-labs</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>12</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>https://www.linkedin.com/company/gourmey</td>\n",
       "      <td>0.526316</td>\n",
       "      <td>5.0</td>\n",
       "      <td>19</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>https://www.linkedin.com/company/kraaft-co</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>https://www.linkedin.com/company/mastergrid/</td>\n",
       "      <td>0.183908</td>\n",
       "      <td>0.0</td>\n",
       "      <td>87</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>https://www.linkedin.com/company/pasqal</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>16</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>https://www.linkedin.com/company/spacesense-co</td>\n",
       "      <td>0.307692</td>\n",
       "      <td>1.0</td>\n",
       "      <td>13</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>https://www.linkedin.com/company/verkor</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     linkedin_url  technical  phd_linkedin  \\\n",
       "0        https://www.linkedin.com/company/carbios   0.315789           1.0   \n",
       "1       https://www.linkedin.com/company/carester   0.571429           1.0   \n",
       "2   https://www.linkedin.com/company/epigene-labs   0.250000           1.0   \n",
       "3        https://www.linkedin.com/company/gourmey   0.526316           5.0   \n",
       "4      https://www.linkedin.com/company/kraaft-co   0.142857           0.0   \n",
       "5    https://www.linkedin.com/company/mastergrid/   0.183908           0.0   \n",
       "6         https://www.linkedin.com/company/pasqal   0.500000           4.0   \n",
       "7  https://www.linkedin.com/company/spacesense-co   0.307692           1.0   \n",
       "8         https://www.linkedin.com/company/verkor   0.333333           0.0   \n",
       "\n",
       "   employee__linkedin_count  founder_from_institute  founder_has_phd  \\\n",
       "0                        38                     0.0              1.0   \n",
       "1                         7                     0.0              0.0   \n",
       "2                        12                     0.0              1.0   \n",
       "3                        19                     2.0              1.0   \n",
       "4                        14                     0.0              0.0   \n",
       "5                        87                     0.0              0.0   \n",
       "6                        16                     0.0              2.0   \n",
       "7                        13                     0.0              0.0   \n",
       "8                        12                     1.0              0.0   \n",
       "\n",
       "   founder_pat_pub  technical_founder  no_linkedin_data  \n",
       "0              0.0                1.0                 0  \n",
       "1              0.0                0.0                 0  \n",
       "2              0.0                1.0                 0  \n",
       "3              0.0                2.0                 0  \n",
       "4              0.0                0.0                 0  \n",
       "5              0.0                0.0                 0  \n",
       "6              2.0                2.0                 0  \n",
       "7              0.0                0.0                 0  \n",
       "8              1.0                1.0                 0  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_companies_stats_with_founders_features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-18T12:01:54.513032Z",
     "start_time": "2020-12-18T12:01:54.472259Z"
    },
    "hidden": true
   },
   "source": [
    "### Last step: merge the the Linked In scraping with new_data\n",
    "Merge is done on Linked In urls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:53.362436Z",
     "start_time": "2020-12-19T14:30:53.254038Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "from bpideep.process_scraped_data import merge_initial_companies_with_founder\n",
    "final = merge_initial_companies_with_founder(new_data, df_companies_stats_with_founders_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:53.435357Z",
     "start_time": "2020-12-19T14:30:53.367077Z"
    },
    "hidden": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "final.drop(columns=['team'], inplace=True)\n",
    "#Remove 'team' after it was used to update phds."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Main model: Finalizing the prepared data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### To use the pipeline, name and order of feature columns need to be the same"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:53.490313Z",
     "start_time": "2020-12-19T14:30:53.439722Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Before dropping columns that are not expected by the pipeline (esp. website_url), \n",
    "# make a copy for use in the NLP part\n",
    "final_for_NLP = final.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:53.559205Z",
     "start_time": "2020-12-19T14:30:53.495900Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "expected_columns = ['id', 'name', 'total_funding_source', 'employees', 'employees_latest',\n",
    "       'launch_year', 'growth_stage', 'linkedin_url', 'industries',\n",
    "       'investors', 'launch_year_clean', 'growth_stage_imputed',\n",
    "       'employees_clean', 'age', 'nb_patents', 'investors_type',\n",
    "       'health_industry', 'company_has_phd', 'proportion_technical',\n",
    "       'founder_from_institute', 'founder_has_phd', 'No_people_input']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:53.632267Z",
     "start_time": "2020-12-19T14:30:53.564050Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Duplicating some columns to accomodate what the pipeline expects\n",
    "final[\"launch_year_clean\"] = final.launch_year # keeping both columns for consistency\n",
    "final[\"growth_stage_imputed\"] = final.growth_stage # keeping both columns for consistency\n",
    "final['employees_clean'] = final.employees_latest # keeping both columns for consistency\n",
    "final['company_has_phd'] = (final['phd_total'] > 0).map(int) \n",
    "# encoding number of phds (taking into account the data not only from Dealroom but also dfrom LinkedIn)\n",
    "# as a yes/no feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:53.700671Z",
     "start_time": "2020-12-19T14:30:53.634815Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Renaming some columns to accomodate what the pipeline expects\n",
    "final.rename(columns={\"no_linkedin_data\" : \"No_people_input\",\n",
    "                        \"technical\" : \"proportion_technical\"\n",
    "                        }, inplace=True)\n",
    "# Dropping unnecessary columns\n",
    "final.drop(columns=['deal_room_phd', 'employee__linkedin_count', 'founder_pat_pub', 'phd_linkedin', \n",
    "                        'technical_founder', 'phd_total'], inplace=True)    \n",
    "# Reordering columns to accomodate what the pipeline expects\n",
    "final = pd.DataFrame(final, columns=expected_columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Checking the NaNs and filling manually if needed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:53.775254Z",
     "start_time": "2020-12-19T14:30:53.703527Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 9 entries, 0 to 8\n",
      "Data columns (total 22 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   id                      9 non-null      int64  \n",
      " 1   name                    9 non-null      object \n",
      " 2   total_funding_source    9 non-null      int64  \n",
      " 3   employees               9 non-null      object \n",
      " 4   employees_latest        8 non-null      float64\n",
      " 5   launch_year             9 non-null      int64  \n",
      " 6   growth_stage            9 non-null      object \n",
      " 7   linkedin_url            9 non-null      object \n",
      " 8   industries              9 non-null      object \n",
      " 9   investors               9 non-null      object \n",
      " 10  launch_year_clean       9 non-null      int64  \n",
      " 11  growth_stage_imputed    9 non-null      object \n",
      " 12  employees_clean         8 non-null      float64\n",
      " 13  age                     9 non-null      int64  \n",
      " 14  nb_patents              9 non-null      int64  \n",
      " 15  investors_type          9 non-null      int64  \n",
      " 16  health_industry         9 non-null      int64  \n",
      " 17  company_has_phd         9 non-null      int64  \n",
      " 18  proportion_technical    7 non-null      float64\n",
      " 19  founder_from_institute  7 non-null      float64\n",
      " 20  founder_has_phd         7 non-null      float64\n",
      " 21  No_people_input         9 non-null      int64  \n",
      "dtypes: float64(5), int64(10), object(7)\n",
      "memory usage: 1.6+ KB\n"
     ]
    }
   ],
   "source": [
    "final.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "It is always best to have real data, even approximated and filled manually, however…\n",
    "\n",
    "**It is allowed to have empty or NaN cells for the following fields:**\n",
    " \n",
    "+ number of employees: \n",
    "    + **employees_latest**\n",
    "    + **employees_clean**\n",
    "+ **age**\n",
    "+ **nb_patents**\n",
    "\n",
    "The pipeline will be able to approximate the missing data, using the average or most frequent data in the training set. \n",
    "\n",
    "⚠️ If you have empty cells in any other fields, the model will throw an error, so make sure to fill them.\n",
    "\n",
    "In our example, all 9 firms have a growth_stage indicated in Dealroom, but **growth_stage and launch_year** are especially prone to be missing in Dealroom and must be checked."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:53.875320Z",
     "start_time": "2020-12-19T14:30:53.789578Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 9 entries, 0 to 8\n",
      "Data columns (total 22 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   id                      9 non-null      int64  \n",
      " 1   name                    9 non-null      object \n",
      " 2   total_funding_source    9 non-null      int64  \n",
      " 3   employees               9 non-null      object \n",
      " 4   employees_latest        8 non-null      float64\n",
      " 5   launch_year             9 non-null      int64  \n",
      " 6   growth_stage            9 non-null      object \n",
      " 7   linkedin_url            9 non-null      object \n",
      " 8   industries              9 non-null      object \n",
      " 9   investors               9 non-null      object \n",
      " 10  launch_year_clean       9 non-null      int64  \n",
      " 11  growth_stage_imputed    9 non-null      object \n",
      " 12  employees_clean         8 non-null      float64\n",
      " 13  age                     9 non-null      int64  \n",
      " 14  nb_patents              9 non-null      int64  \n",
      " 15  investors_type          9 non-null      int64  \n",
      " 16  health_industry         9 non-null      int64  \n",
      " 17  company_has_phd         9 non-null      int64  \n",
      " 18  proportion_technical    9 non-null      float64\n",
      " 19  founder_from_institute  9 non-null      float64\n",
      " 20  founder_has_phd         9 non-null      float64\n",
      " 21  No_people_input         9 non-null      int64  \n",
      "dtypes: float64(5), int64(10), object(7)\n",
      "memory usage: 1.6+ KB\n"
     ]
    }
   ],
   "source": [
    "# filling the NaN values in all columns that are not imputed by the pipeline\n",
    "final.fillna(value={'proportion_technical':0, 'founder_from_institute':0, 'founder_has_phd':0 },inplace=True)\n",
    "final.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Main model: Using the main model to predict whether the company is deeptech"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-16T09:48:56.126287Z",
     "start_time": "2020-12-16T09:48:56.119249Z"
    },
    "hidden": true
   },
   "source": [
    "Use the model already trained on our entire dataset except almost_deep_tech and some duplicates (1332 observations) : "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:53.928729Z",
     "start_time": "2020-12-19T14:30:53.881148Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The \"final\" dataframe should have 22 fields\n",
    "final.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:54.921086Z",
     "start_time": "2020-12-19T14:30:53.931172Z"
    },
    "hidden": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# pip install dill if needed\n",
    "# it is like pickle but handles some aspects better, e.g. lambda functions\n",
    "\n",
    "import dill as pickle\n",
    " \n",
    "# Load pipeline from pickle file\n",
    "my_pipeline = pickle.load(open(\"../bpideep/bpideepmodelnew.pkl\",\"rb\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:30:55.131812Z",
     "start_time": "2020-12-19T14:30:54.923626Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.059667</td>\n",
       "      <td>0.940333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.861107</td>\n",
       "      <td>0.138893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.260000</td>\n",
       "      <td>0.740000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.828095</td>\n",
       "      <td>0.171905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.080000</td>\n",
       "      <td>0.920000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.020000</td>\n",
       "      <td>0.980000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.190000</td>\n",
       "      <td>0.810000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.430000</td>\n",
       "      <td>0.570000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.650000</td>\n",
       "      <td>0.350000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1\n",
       "0  0.059667  0.940333\n",
       "1  0.861107  0.138893\n",
       "2  0.260000  0.740000\n",
       "3  0.828095  0.171905\n",
       "4  0.080000  0.920000\n",
       "5  0.020000  0.980000\n",
       "6  0.190000  0.810000\n",
       "7  0.430000  0.570000\n",
       "8  0.650000  0.350000"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Predict the Labels using the reloaded Model\n",
    "y_pred = pd.DataFrame(my_pipeline.predict_proba(final), columns=['0','1'])\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## NLP model: Scraping and using text data for NLP prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T15:11:46.203671Z",
     "start_time": "2020-12-19T15:11:46.053741Z"
    },
    "hidden": true
   },
   "source": [
    "### Retrieving text data \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:31:00.728918Z",
     "start_time": "2020-12-19T14:30:55.159875Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# import from deep4deep module\n",
    "from deep4deep.text_retrieval import get_meta_description_columns\n",
    "from deep4deep.w2v_embedding_and_rnn_model import Preprocessor, Embedder\n",
    "from deep4deep.predictor import Predictor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T14:31:00.881198Z",
     "start_time": "2020-12-19T14:31:00.731206Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "NLP_useful_columns = ['id', 'name', 'tagline', 'website_url'] #, 'url'\n",
    "df_with_metatags = final_for_NLP[NLP_useful_columns].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T15:36:34.294378Z",
     "start_time": "2020-12-19T15:36:22.205762Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# add/scrape the needed metadescriptions\n",
    "df_with_metatags = get_meta_description_columns(df_with_metatags)\n",
    "# concatenate both\n",
    "df_with_metatags['full_text'] = df_with_metatags.dealroom_meta_description + \" \" + df_with_metatags.meta_description\n",
    "# ramener toutes les strings avec seulement des espaces à la string vide\n",
    "df_with_metatags['full_text'] = df_with_metatags['full_text'].map(lambda x : x.strip())\n",
    "# replacing NaN by \"\" for easier treatment\n",
    "df_with_metatags.fillna(value={\"full_text\":\"\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T15:05:17.813646Z",
     "start_time": "2020-12-19T15:05:06.755090Z"
    },
    "hidden": true
   },
   "source": [
    "If there is an empty cell in the \"full_text\" column (either empty string \"\" or NaN), you can retrieve manually a short description from the website, LinkedIn, Welcome to the Jungle, Crunchbase, AngelList, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T15:45:58.702383Z",
     "start_time": "2020-12-19T15:45:58.558767Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>tagline</th>\n",
       "      <th>website_url</th>\n",
       "      <th>dealroom_meta_description</th>\n",
       "      <th>meta_description</th>\n",
       "      <th>full_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1985985</td>\n",
       "      <td>Verkor</td>\n",
       "      <td>Verkor is a French industrial company set to a...</td>\n",
       "      <td>http://verkor.com/</td>\n",
       "      <td>Verkor is a French industrial company set to a...</td>\n",
       "      <td>Batteries. Now. For the future.</td>\n",
       "      <td>Verkor is a French industrial company set to a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1841152</td>\n",
       "      <td>Angell</td>\n",
       "      <td>Designed and produced a smart bike for better ...</td>\n",
       "      <td>https://angell.bike/</td>\n",
       "      <td>Designed and produced a smart bike for better ...</td>\n",
       "      <td>Discover , the French electric bike, light and...</td>\n",
       "      <td>Designed and produced a smart bike for better ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>924274</td>\n",
       "      <td>Carbios</td>\n",
       "      <td>Creates a new generation of fully biodegradabl...</td>\n",
       "      <td>https://carbios.fr/en</td>\n",
       "      <td>Creates a new generation of fully biodegradabl...</td>\n",
       "      <td>Reinvent Polymers Lifecycle on …</td>\n",
       "      <td>Creates a new generation of fully biodegradabl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2434315</td>\n",
       "      <td>Mastergrid</td>\n",
       "      <td>Haute-tension | MasterGrid | France</td>\n",
       "      <td>http://mastergrid.com</td>\n",
       "      <td>Haute-tension | MasterGrid | France</td>\n",
       "      <td>L’expertise MasterGrid au service des équipeme...</td>\n",
       "      <td>Haute-tension | MasterGrid | France L’expertis...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1685632</td>\n",
       "      <td>Pasqal</td>\n",
       "      <td>Building Programmable Quantum Simulators and Q...</td>\n",
       "      <td>https://pasqal.io/</td>\n",
       "      <td>Building Programmable Quantum Simulators and Q...</td>\n",
       "      <td>We build Quantum Processing Units.</td>\n",
       "      <td>Building Programmable Quantum Simulators and Q...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1769618</td>\n",
       "      <td>Gourmey</td>\n",
       "      <td>First cultivated meat company in France with a...</td>\n",
       "      <td>https://gourmey.com/</td>\n",
       "      <td>First cultivated meat company in France with a...</td>\n",
       "      <td>GOURMEY développe un foie gras sans gavage ni ...</td>\n",
       "      <td>First cultivated meat company in France with a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1757959</td>\n",
       "      <td>Epigene Labs</td>\n",
       "      <td>Genomic data-driven drug design for precision ...</td>\n",
       "      <td>http://www.epigenelabs.com/</td>\n",
       "      <td>Genomic data-driven drug design for precision ...</td>\n",
       "      <td>Genomics-driven drug design for precision onco...</td>\n",
       "      <td>Genomic data-driven drug design for precision ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1814695</td>\n",
       "      <td>SpaceSense</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://spacesense.co/</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Office for Rent: Grade A Buildings, Commercial...</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1570787</td>\n",
       "      <td>Kraaft</td>\n",
       "      <td>Reinventing interface in factories through voi...</td>\n",
       "      <td>https://www.kraaft.co/</td>\n",
       "      <td>Reinventing interface in factories through voi...</td>\n",
       "      <td></td>\n",
       "      <td>Reinventing interface in factories through voi...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id          name                                            tagline  \\\n",
       "0  1985985        Verkor  Verkor is a French industrial company set to a...   \n",
       "1  1841152        Angell  Designed and produced a smart bike for better ...   \n",
       "2   924274       Carbios  Creates a new generation of fully biodegradabl...   \n",
       "3  2434315    Mastergrid                Haute-tension | MasterGrid | France   \n",
       "4  1685632        Pasqal  Building Programmable Quantum Simulators and Q...   \n",
       "5  1769618       Gourmey  First cultivated meat company in France with a...   \n",
       "6  1757959  Epigene Labs  Genomic data-driven drug design for precision ...   \n",
       "7  1814695    SpaceSense                                                NaN   \n",
       "8  1570787        Kraaft  Reinventing interface in factories through voi...   \n",
       "\n",
       "                   website_url  \\\n",
       "0           http://verkor.com/   \n",
       "1         https://angell.bike/   \n",
       "2        https://carbios.fr/en   \n",
       "3        http://mastergrid.com   \n",
       "4           https://pasqal.io/   \n",
       "5         https://gourmey.com/   \n",
       "6  http://www.epigenelabs.com/   \n",
       "7       https://spacesense.co/   \n",
       "8       https://www.kraaft.co/   \n",
       "\n",
       "                           dealroom_meta_description  \\\n",
       "0  Verkor is a French industrial company set to a...   \n",
       "1  Designed and produced a smart bike for better ...   \n",
       "2  Creates a new generation of fully biodegradabl...   \n",
       "3                Haute-tension | MasterGrid | France   \n",
       "4  Building Programmable Quantum Simulators and Q...   \n",
       "5  First cultivated meat company in France with a...   \n",
       "6  Genomic data-driven drug design for precision ...   \n",
       "7                                                NaN   \n",
       "8  Reinventing interface in factories through voi...   \n",
       "\n",
       "                                    meta_description  \\\n",
       "0                    Batteries. Now. For the future.   \n",
       "1  Discover , the French electric bike, light and...   \n",
       "2                   Reinvent Polymers Lifecycle on …   \n",
       "3  L’expertise MasterGrid au service des équipeme...   \n",
       "4                 We build Quantum Processing Units.   \n",
       "5  GOURMEY développe un foie gras sans gavage ni ...   \n",
       "6  Genomics-driven drug design for precision onco...   \n",
       "7  Office for Rent: Grade A Buildings, Commercial...   \n",
       "8                                                      \n",
       "\n",
       "                                           full_text  \n",
       "0  Verkor is a French industrial company set to a...  \n",
       "1  Designed and produced a smart bike for better ...  \n",
       "2  Creates a new generation of fully biodegradabl...  \n",
       "3  Haute-tension | MasterGrid | France L’expertis...  \n",
       "4  Building Programmable Quantum Simulators and Q...  \n",
       "5  First cultivated meat company in France with a...  \n",
       "6  Genomic data-driven drug design for precision ...  \n",
       "7                                                     \n",
       "8  Reinventing interface in factories through voi...  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_with_metatags"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Using the NLP model to predict whether the company is deeptech"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T15:47:01.166736Z",
     "start_time": "2020-12-19T15:47:01.011348Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Predictions on an empty string give a low prediction score that is not accurate.\n",
    "# Therefore we store where there are empty strings, to replace the prevision by NaN\n",
    "replace_empty = df_with_metatags.full_text == \"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T15:32:58.762154Z",
     "start_time": "2020-12-19T15:29:26.405527Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "initializing Preprocessor\n",
      "initializing Embedder\n",
      "downloading transfer learning embedder glove-wiki-gigaword-300 – this may take time… coffee break? ☕️☕️☕️\n",
      "initializing Predictor\n"
     ]
    }
   ],
   "source": [
    "# initializing instances: it takes several minutes, time for a break\n",
    "# After this cell has run once, comment it, at least the embedder line, to \n",
    "# avoid waiting again if you run it by mistake\n",
    "\n",
    "# the predictor will use the model obtained by training in the repository \n",
    "# this model is stored in the folder: deeptech_NLP_model\n",
    "# if you retrain the NLP model on more data, please replace this folder by the new one\n",
    "preprocessor = Preprocessor()\n",
    "embedder = Embedder()\n",
    "predictor = Predictor(preprocessor, embedder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T15:47:16.301084Z",
     "start_time": "2020-12-19T15:47:16.103960Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "NLP_predict = predictor.predict(df_with_metatags['full_text'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T15:47:43.558680Z",
     "start_time": "2020-12-19T15:47:43.395836Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "NLP_predict[replace_empty] = np.nan\n",
    "NLP_predict"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Making the two predictions \"vote\" for final prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Building the results dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T15:56:43.747864Z",
     "start_time": "2020-12-19T15:56:43.603543Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>y_pred_forest</th>\n",
       "      <th>y_pred_NLP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1985985</td>\n",
       "      <td>Verkor</td>\n",
       "      <td>0.940333</td>\n",
       "      <td>0.886109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1841152</td>\n",
       "      <td>Angell</td>\n",
       "      <td>0.138893</td>\n",
       "      <td>0.319271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>924274</td>\n",
       "      <td>Carbios</td>\n",
       "      <td>0.740000</td>\n",
       "      <td>0.868433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2434315</td>\n",
       "      <td>Mastergrid</td>\n",
       "      <td>0.171905</td>\n",
       "      <td>0.507544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1685632</td>\n",
       "      <td>Pasqal</td>\n",
       "      <td>0.920000</td>\n",
       "      <td>1.042979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1769618</td>\n",
       "      <td>Gourmey</td>\n",
       "      <td>0.980000</td>\n",
       "      <td>0.056013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1757959</td>\n",
       "      <td>Epigene Labs</td>\n",
       "      <td>0.810000</td>\n",
       "      <td>0.991659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1814695</td>\n",
       "      <td>SpaceSense</td>\n",
       "      <td>0.570000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1570787</td>\n",
       "      <td>Kraaft</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>0.671148</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id          name  y_pred_forest  y_pred_NLP\n",
       "0  1985985        Verkor       0.940333    0.886109\n",
       "1  1841152        Angell       0.138893    0.319271\n",
       "2   924274       Carbios       0.740000    0.868433\n",
       "3  2434315    Mastergrid       0.171905    0.507544\n",
       "4  1685632        Pasqal       0.920000    1.042979\n",
       "5  1769618       Gourmey       0.980000    0.056013\n",
       "6  1757959  Epigene Labs       0.810000    0.991659\n",
       "7  1814695    SpaceSense       0.570000         NaN\n",
       "8  1570787        Kraaft       0.350000    0.671148"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions = pd.DataFrame()\n",
    "predictions[['id', 'name']] = df_with_metatags[['id', 'name']] # here you can add full_text for inspection if needed\n",
    "# don't change the column names as they are used by the 'take_measure' function\n",
    "# forest is for the main model based on a random forest\n",
    "predictions['y_pred_forest'] = y_pred['1']\n",
    "predictions['y_pred_NLP']  = NLP_predict\n",
    "predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Making the two models vote"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T15:57:10.669732Z",
     "start_time": "2020-12-19T15:57:10.541257Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "from deep4deep.voting import take_measure"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "You can adapt the voting method depending on your need:\n",
    "\n",
    "+ 'min' is best to maximize precision (while keeping a reasonable recall)\n",
    "+ 'max' is best to maximize recall (while keeping a reasonable precision)\n",
    "+ 'mean' will have a more balanced approach"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T16:03:25.446543Z",
     "start_time": "2020-12-19T16:03:25.307726Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "voting_method = 'min'\n",
    "\n",
    "predictions['common_prediction'] = predictions.apply(lambda x: take_measure(x, voting_method), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T16:03:27.267797Z",
     "start_time": "2020-12-19T16:03:27.122305Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# then using the threhsold to convert to a \"is_deeptech\" yes or no prediction\n",
    "# you can change the threshold if needed\n",
    "threshold = 0.5\n",
    "predictions['binary_common_prediction'] = [1 if item >threshold else 0 for item in predictions.common_prediction]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T16:03:28.330487Z",
     "start_time": "2020-12-19T16:03:28.201103Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>y_pred_forest</th>\n",
       "      <th>y_pred_NLP</th>\n",
       "      <th>common_prediction</th>\n",
       "      <th>binary_common_prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1985985</td>\n",
       "      <td>Verkor</td>\n",
       "      <td>0.940333</td>\n",
       "      <td>0.886109</td>\n",
       "      <td>0.886109</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1841152</td>\n",
       "      <td>Angell</td>\n",
       "      <td>0.138893</td>\n",
       "      <td>0.319271</td>\n",
       "      <td>0.138893</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>924274</td>\n",
       "      <td>Carbios</td>\n",
       "      <td>0.740000</td>\n",
       "      <td>0.868433</td>\n",
       "      <td>0.740000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2434315</td>\n",
       "      <td>Mastergrid</td>\n",
       "      <td>0.171905</td>\n",
       "      <td>0.507544</td>\n",
       "      <td>0.171905</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1685632</td>\n",
       "      <td>Pasqal</td>\n",
       "      <td>0.920000</td>\n",
       "      <td>1.042979</td>\n",
       "      <td>0.920000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1769618</td>\n",
       "      <td>Gourmey</td>\n",
       "      <td>0.980000</td>\n",
       "      <td>0.056013</td>\n",
       "      <td>0.056013</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1757959</td>\n",
       "      <td>Epigene Labs</td>\n",
       "      <td>0.810000</td>\n",
       "      <td>0.991659</td>\n",
       "      <td>0.810000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1814695</td>\n",
       "      <td>SpaceSense</td>\n",
       "      <td>0.570000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.570000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1570787</td>\n",
       "      <td>Kraaft</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>0.671148</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id          name  y_pred_forest  y_pred_NLP  common_prediction  \\\n",
       "0  1985985        Verkor       0.940333    0.886109           0.886109   \n",
       "1  1841152        Angell       0.138893    0.319271           0.138893   \n",
       "2   924274       Carbios       0.740000    0.868433           0.740000   \n",
       "3  2434315    Mastergrid       0.171905    0.507544           0.171905   \n",
       "4  1685632        Pasqal       0.920000    1.042979           0.920000   \n",
       "5  1769618       Gourmey       0.980000    0.056013           0.056013   \n",
       "6  1757959  Epigene Labs       0.810000    0.991659           0.810000   \n",
       "7  1814695    SpaceSense       0.570000         NaN           0.570000   \n",
       "8  1570787        Kraaft       0.350000    0.671148           0.350000   \n",
       "\n",
       "   binary_common_prediction  \n",
       "0                         1  \n",
       "1                         0  \n",
       "2                         1  \n",
       "3                         0  \n",
       "4                         1  \n",
       "5                         0  \n",
       "6                         1  \n",
       "7                         1  \n",
       "8                         0  "
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Saving the predictions file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T16:05:00.952558Z",
     "start_time": "2020-12-19T16:05:00.834575Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "predictions.to_csv(\"predictions.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-19T15:32:58.879184Z",
     "start_time": "2020-12-19T15:32:58.765681Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# have the scraping run again: better? as good?\n",
    "# see if you want to retrain the model with better meta data (and check it works)\n",
    "# see if you want to update the API with the new model\n",
    "# see if you want to tell flo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Note on retraining a model with more labelled data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### For the main, random forest model\n",
    "\n",
    "When you have labelled new data as deep_tech or not and want to train a new version of the model on more data:\n",
    "\n",
    "+ To get the data from Dealroom if you have the dealroom ids, you can use the function written by the former Wagon team:\n",
    "    + List all the companies Dealroom ID you want to analyse in 3 different csv according to the companies classification (deeptech, non_deeptech, almost_deeptech) and save these three csv in the folder \"data\". \n",
    "    + Import and use the function `getdata.getfulldata()` (former wagon team function) to get the new companies data from Dealroom and save the csv in the local folder `bpideep/rawdata`\n",
    "+ Due to the short time we had, growth_stage and launch_year imputing have been handled outside of the pipeline, in the dataset preparation.We suggest you may want to integrate imputing of those and maybe more data to the pipeline so that any dataset of new observations can directly be handled by the pipeline.\n",
    "+ You may need the function GetCleanData.get_clean_data(), that encompasses several steps we did manually in this notebook (creating the health_industry column, etc.). This function is adapted to the dataset as we had it in Decembre 2020, so you will probably need to evolve it a bit\n",
    "+ To use the function GetCleanData.get_clean_data(), don't forget to save the csv files (for the patents and LinkedIn data) in the folder \"data\", and replace the name of the csv if different from the name written in the function."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### For the NLP model\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Use the training_the_model notebook or an adaptation of the \"demo\" function in trainer.py.\n",
    "\n",
    "You may want to adapt the model to use other sources of text on top of the existing ones:\n",
    "\n",
    "+ create an additional column of this text\n",
    "+ concatenate it in \"full_text\" in 6.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "279.273px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
